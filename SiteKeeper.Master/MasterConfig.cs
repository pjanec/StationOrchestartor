namespace SiteKeeper.Master
{
    /// <summary>
    /// Holds configuration settings for the SiteKeeper Master Agent application.
    /// </summary>
    /// <remarks>
    /// These settings are typically loaded from configuration sources like <c>appsettings.json</c>
    /// or environment variables during application startup and made available via
    /// <see cref="Microsoft.Extensions.Options.IOptions{TOptions}"/>.
    /// </remarks>
    public class MasterConfig
    {
        /// <summary>
        /// Gets or sets the port number on which the Master Agent's GUI and general API endpoints will be accessible.
        /// </summary>
        /// <value>The GUI and API port number. Defaults to 7001.</value>
        public int GuiPort { get; set; } = 7001;

        /// <summary>
        /// Gets or sets the port number dedicated for Slave Agent communication via the SignalR Agent Hub.
        /// </summary>
        /// <value>The Agent Hub port number. Defaults to 7002.</value>
        public int AgentPort { get; set; } = 7002;

        /// <summary>
        /// Gets or sets a value indicating whether HTTPS should be enforced for all communication on both GuiPort and AgentPort.
        /// </summary>
        /// <value><c>true</c> to use HTTPS; otherwise, <c>false</c>. Defaults to <c>false</c>.</value>
        public bool UseHttps { get; set; } = false;

        /// <summary>
        /// Gets or sets the file path to the master server's SSL/TLS certificate (e.g., a .pfx or .pem file).
        /// This is required if <see cref="UseHttps"/> is <c>true</c>.
        /// </summary>
        /// <value>The path to the SSL/TLS certificate file.</value>
        public string? MasterCertPath { get; set; }

        /// <summary>
        /// Gets or sets the password for the master server's SSL/TLS certificate file, if the certificate is password-protected.
        /// This is required if <see cref="UseHttps"/> is <c>true</c> and the certificate file is encrypted.
        /// </summary>
        /// <value>The password for the certificate file.</value>
        public string? MasterCertPassword { get; set; }

        /// <summary>
        /// Gets or sets the file path to the Certificate Authority (CA) certificate file used to validate client certificates from Slave Agents.
        /// If a path is provided, client certificate authentication will be configured and required for connections to the AgentPort.
        /// </summary>
        /// <value>The path to the CA certificate file for client authentication.</value>
        public string? MasterCaCertPath { get; set; }

        /// <summary>
        /// Gets or sets the issuer claim value for JWT (JSON Web Token) authentication tokens generated by the Master Agent.
        /// </summary>
        /// <value>The JWT issuer string. Defaults to "SiteKeeperMaster".</value>
        public string JwtIssuer { get; set; } = "SiteKeeperMaster";

        /// <summary>
        /// Gets or sets the audience claim value for JWT authentication tokens generated by the Master Agent.
        /// This specifies the intended recipient of the tokens.
        /// </summary>
        /// <value>The JWT audience string. Defaults to "SiteKeeperClients".</value>
        public string JwtAudience { get; set; } = "SiteKeeperClients";

        /// <summary>
        /// Gets or sets the secret key used for signing and verifying JWT authentication tokens.
        /// This key must be kept confidential and should be sufficiently complex.
        /// For HS256 algorithm, a minimum of 16 characters (128 bits) is recommended.
        /// </summary>
        /// <value>The JWT secret key. Defaults to "DefaultSuperSecretKeyNeedsChanging".
        /// **IMPORTANT: This default value MUST be changed in production environments.**</value>
        public string JwtSecretKey { get; set; } = "DefaultSuperSecretKeyNeedsChanging";

        /// <summary>
        /// Gets or sets the expiration time in minutes for JWT access tokens.
        /// </summary>
        /// <value>The access token expiration time in minutes. Defaults to 60.</value>
        public int JwtExpirationMinutes { get; set; } = 60;

        /// <summary>
        /// Gets or sets the expiration time in days for refresh tokens.
        /// </summary>
        /// <value>The refresh token expiration time in days. Defaults to 7.</value>
        public int RefreshTokenExpirationDays { get; set; } = 7;

        /// <summary>
        /// Gets or sets the root directory path where all journaling data (Action Journals, Change Journals, Backups) will be stored.
        /// This can be an absolute path or a path relative to the application's content root.
        /// </summary>
        /// <value>The root path for journal storage. Defaults to "Journal".</value>
        public string JournalRootPath { get; set; } = "Journal";

		/// <summary>
		/// Gets or sets the name of the current environment (e.g., "Production", "Staging", "MyTestEnv").
        /// This name is used to create a subfolder within the <see cref="JournalRootPath"/>,
        /// ensuring that journal entries for different environments are stored separately.
		/// </summary>
        /// <value>The environment name. Defaults to "MyTestEnv".</value>
		public string EnvironmentName  { get; set; } = "MyTestEnv";

        /// <summary>
        /// Gets or sets the expected interval in seconds at which Slave Agents should send heartbeats.
        /// This value is used by <see cref="Services.NodeHealthMonitorService"/> to determine heartbeat tolerance and offline thresholds.
        /// </summary>
        /// <value>The heartbeat interval in seconds. Defaults to 10.</value>
        public int HeartbeatIntervalSeconds { get; set; } = 10;
	}
} 